{
	"name": "P_ODSP_Files_DailyCuration",
	"properties": {
		"activities": [
			{
				"name": "GetKeyAppInsightsKey",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "SwitchTenantSize",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.01:00:00",
					"retry": 4,
					"retryIntervalInSeconds": 300,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": {
						"value": "https://odsparchimedeskv.vault.azure.net/secrets/@{if(or(equals(pipeline().globalParameters.Ring, 'dev'), equals(pipeline().globalParameters.Ring, 'ppe')), 'AppInsightsDevInstrumentationKey', 'AppInsightsInstrumentationKey')}?api-version=7.0",
						"type": "Expression"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "CurateData",
				"type": "SparkJob",
				"dependsOn": [
					{
						"activity": "GetKeyAppInsightsKey",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "GetApprovalParams",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.15:00:00",
					"retry": 1,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [
					{
						"name": "ApprovalRequestParameters",
						"value": "@activity('GetApprovalParams').output.pipelineReturnValue.ApprovalBody"
					}
				],
				"typeProperties": {
					"sparkJob": {
						"referenceName": {
							"value": "PythonTemplateSparkJob",
							"type": "Expression"
						},
						"type": "SparkJobDefinitionReference"
					},
					"file": {
						"value": "@concat('abfss://scenarioartifacts@', pipeline().globalParameters.controlPlaneStorageAccount, '.dfs.core.windows.net/', pipeline().globalParameters.BuildVersion, '/ArchimedesV2/files_pyspark_adapter.py')",
						"type": "Expression"
					},
					"className": "",
					"args": [
						"--is_gen2",
						"true",
						"--root",
						"@pipeline().globalParameters.dataPlaneStorageAccount",
						"--tenant_list",
						"@pipeline().parameters.TenantList",
						"--tenantId",
						"@pipeline().parameters.TenantId",
						"--execution_parallelism",
						"1",
						"--Dataset",
						"Files",
						"--Version",
						"2",
						"--WindowStartTime",
						"@pipeline().parameters.WindowStartTime",
						"--WindowEndTime",
						"@pipeline().parameters.WindowEndTime",
						"--DataStorageAccount",
						"@{pipeline().globalParameters.dataPlaneStorageAccount},@{pipeline().globalParameters.dataPlane2StorageAccount}",
						"--OutputFormat",
						"@pipeline().parameters.OutputFormat",
						"--writeToTestLocation",
						"@pipeline().parameters.WriteToTestLocation",
						"--isDebugMode",
						"@pipeline().parameters.IsDebugMode",
						"--enableLogging",
						"@pipeline().parameters.EnableLogging",
						"--defaultFilePattern",
						"@string(coalesce(pipeline().parameters.DefaultFilePattern,''))",
						"--environment",
						"@pipeline().globalParameters.Ring",
						"--buildVersion",
						"@string(coalesce(pipeline().parameters.BuildVersion,pipeline().globalParameters.BuildVersion))",
						"--fullDataSeedDate",
						"@string(coalesce(pipeline().parameters.FullDataSeedDate,''))",
						"--watermarkFlags",
						"@pipeline().parameters.WatermarkFlags",
						"--officeRegion",
						"@pipeline().globalParameters.OfficeRegion",
						"--validateInFileCrossTenantValidation",
						"@pipeline().parameters.ValidateInFileCrossTenantValidation",
						"--pipelineRunId",
						"@pipeline().RunId",
						"--pipelineGroupId",
						"@string(coalesce(pipeline().parameters.BucketCount, ''))",
						"--appInsightsKey",
						"@activity('GetKeyAppInsightsKey').output.value",
						"--dataStorageSecondaryAccountName",
						"@pipeline().globalParameters.dataPlane2StorageAccount"
					],
					"scanFolder": true,
					"targetBigDataPool": {
						"referenceName": {
							"value": "synfilespool2",
							"type": "Expression"
						},
						"type": "bigDataPoolReference"
					},
					"executorSize": {
						"value": "@variables('SynapseExecutorNodeSize')",
						"type": "Expression"
					},
					"conf": {
						"spark.dynamicAllocation.enabled": false,
						"spark.dynamicAllocation.minExecutors": {
							"value": "@variables('SynapseExecutorNodeCount')",
							"type": "Expression"
						},
						"spark.dynamicAllocation.maxExecutors": {
							"value": "@variables('SynapseExecutorNodeCount')",
							"type": "Expression"
						}
					},
					"driverSize": {
						"value": "@variables('SynapseDriverNodeSize')",
						"type": "Expression"
					},
					"numExecutors": {
						"value": "@variables('SynapseExecutorNodeCount')",
						"type": "Expression"
					},
					"configurationType": "Customized",
					"sparkConfig": {
						"spark.sql.shuffle.partitions": {
							"value": "@pipeline().parameters.SparkShufflePartitions",
							"type": "Expression"
						},
						"spark.sql.adaptive.coalescePartitions.parallelismFirst": "false",
						"spark.sql.optimizer.canChangeCachedPlanOutputPartitioning": "true",
						"spark.synapse.vegas.useCache": "false",
						"spark.synapse.vegas.cacheSize": "0",
						"spark.sql.files.maxPartitionBytes": {
							"value": "@pipeline().parameters.SparkMaxPartitionBytesInRead",
							"type": "Expression"
						},
						"spark.sql.adaptive.advisoryPartitionSizeInBytes": {
							"value": "@pipeline().parameters.SparkAdvisoryPartitionSizeInBytes",
							"type": "Expression"
						},
						"spark.kryoserializer.buffer.max": "1g"
					}
				},
				"linkedServiceName": {
					"referenceName": "workspaceSynapseLinkedService",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "SwitchTenantSize",
				"type": "Switch",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@pipeline().parameters.TenantSize",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "small",
							"activities": [
								{
									"name": "SetDriverSize_Small",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseDriverNodeSize",
										"value": "Small"
									}
								},
								{
									"name": "SetExecutorSize_Small",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeSize",
										"value": "Medium"
									}
								},
								{
									"name": "SetExecutorCount_Small",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeCount",
										"value": "1"
									}
								}
							]
						},
						{
							"value": "medium",
							"activities": [
								{
									"name": "SetDriverSize_Medium",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseDriverNodeSize",
										"value": "Medium"
									}
								},
								{
									"name": "SetExecutorSize_Medium",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeSize",
										"value": "Medium"
									}
								},
								{
									"name": "SetExecutorCount_Medium",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeCount",
										"value": "6"
									}
								}
							]
						},
						{
							"value": "large",
							"activities": [
								{
									"name": "SetDriverSize_Large",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseDriverNodeSize",
										"value": "Medium"
									}
								},
								{
									"name": "SetExecutorSize_Large",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeSize",
										"value": "Medium"
									}
								},
								{
									"name": "SetExecutorCount_Large",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeCount",
										"value": "11"
									}
								}
							]
						},
						{
							"value": "xlarge",
							"activities": [
								{
									"name": "SetDriverSize_xlarge",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseDriverNodeSize",
										"value": "Medium"
									}
								},
								{
									"name": "SetExecutorSize_xlarge",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeSize",
										"value": "Medium"
									}
								},
								{
									"name": "SetExecutorCount_xlarge",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SynapseExecutorNodeCount",
										"value": "27"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "UnknownTenantSize",
							"type": "Fail",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"message": "Unknown tenant size",
								"errorCode": "400"
							}
						}
					]
				}
			},
			{
				"name": "CurateData_fallback",
				"type": "SparkJob",
				"dependsOn": [
					{
						"activity": "CurateData",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.15:00:00",
					"retry": 1,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [
					{
						"name": "ApprovalRequestParameters",
						"value": "@activity('GetApprovalParams').output.pipelineReturnValue.ApprovalBody"
					}
				],
				"typeProperties": {
					"sparkJob": {
						"referenceName": {
							"value": "PythonTemplateSparkJob",
							"type": "Expression"
						},
						"type": "SparkJobDefinitionReference"
					},
					"file": {
						"value": "@concat('abfss://scenarioartifacts@', pipeline().globalParameters.controlPlaneStorageAccount, '.dfs.core.windows.net/', pipeline().globalParameters.BuildVersion, '/ArchimedesV2/files_pyspark_adapter.py')",
						"type": "Expression"
					},
					"className": "",
					"args": [
						"--is_gen2",
						"true",
						"--root",
						"@pipeline().globalParameters.dataPlaneStorageAccount",
						"--tenant_list",
						"@pipeline().parameters.TenantList",
						"--tenantId",
						"@pipeline().parameters.TenantId",
						"--execution_parallelism",
						"1",
						"--Dataset",
						"Files",
						"--Version",
						"2",
						"--WindowStartTime",
						"@pipeline().parameters.WindowStartTime",
						"--WindowEndTime",
						"@pipeline().parameters.WindowEndTime",
						"--DataStorageAccount",
						"@{pipeline().globalParameters.dataPlaneStorageAccount},@{pipeline().globalParameters.dataPlane2StorageAccount}",
						"--OutputFormat",
						"@pipeline().parameters.OutputFormat",
						"--writeToTestLocation",
						"@pipeline().parameters.WriteToTestLocation",
						"--isDebugMode",
						"@pipeline().parameters.IsDebugMode",
						"--enableLogging",
						"@pipeline().parameters.EnableLogging",
						"--defaultFilePattern",
						"@string(coalesce(pipeline().parameters.DefaultFilePattern,''))",
						"--environment",
						"@pipeline().globalParameters.Ring",
						"--buildVersion",
						"@string(coalesce(pipeline().parameters.BuildVersion,pipeline().globalParameters.BuildVersion))",
						"--fullDataSeedDate",
						"@string(coalesce(pipeline().parameters.FullDataSeedDate,''))",
						"--watermarkFlags",
						"@pipeline().parameters.WatermarkFlags",
						"--officeRegion",
						"@pipeline().globalParameters.OfficeRegion",
						"--validateInFileCrossTenantValidation",
						"@pipeline().parameters.ValidateInFileCrossTenantValidation",
						"--pipelineRunId",
						"@pipeline().RunId",
						"--pipelineGroupId",
						"@string(coalesce(pipeline().parameters.BucketCount, ''))",
						"--appInsightsKey",
						"@activity('GetKeyAppInsightsKey').output.value",
						"--dataStorageSecondaryAccountName",
						"@pipeline().globalParameters.dataPlane2StorageAccount"
					],
					"scanFolder": true,
					"targetBigDataPool": {
						"referenceName": {
							"value": "synfilespool",
							"type": "Expression"
						},
						"type": "bigDataPoolReference"
					},
					"executorSize": {
						"value": "@variables('SynapseExecutorNodeSize')",
						"type": "Expression"
					},
					"conf": {
						"spark.dynamicAllocation.enabled": false,
						"spark.dynamicAllocation.minExecutors": {
							"value": "@variables('SynapseExecutorNodeCount')",
							"type": "Expression"
						},
						"spark.dynamicAllocation.maxExecutors": {
							"value": "@variables('SynapseExecutorNodeCount')",
							"type": "Expression"
						}
					},
					"driverSize": {
						"value": "@variables('SynapseDriverNodeSize')",
						"type": "Expression"
					},
					"numExecutors": {
						"value": "@variables('SynapseExecutorNodeCount')",
						"type": "Expression"
					},
					"configurationType": "Customized",
					"sparkConfig": {
						"spark.sql.shuffle.partitions": {
							"value": "@pipeline().parameters.SparkShufflePartitions",
							"type": "Expression"
						},
						"spark.sql.adaptive.coalescePartitions.parallelismFirst": "false",
						"spark.sql.optimizer.canChangeCachedPlanOutputPartitioning": "true",
						"spark.synapse.vegas.useCache": "false",
						"spark.synapse.vegas.cacheSize": "0",
						"spark.sql.files.maxPartitionBytes": {
							"value": "@pipeline().parameters.SparkMaxPartitionBytesInRead",
							"type": "Expression"
						},
						"spark.sql.adaptive.advisoryPartitionSizeInBytes": {
							"value": "@pipeline().parameters.SparkAdvisoryPartitionSizeInBytes",
							"type": "Expression"
						},
						"spark.kryoserializer.buffer.max": "1g"
					}
				},
				"linkedServiceName": {
					"referenceName": "workspaceSynapseLinkedService",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "GetApprovalParams",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "P_AdfNativeApprovalCompute",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"InputStorageAccountsCSV": {
							"value": "@pipeline().globalParameters.dataPlaneStorageAccount",
							"type": "Expression"
						},
						"UsePrimaryAccountForOutput": true
					}
				}
			}
		],
		"concurrency": 20,
		"parameters": {
			"TenantList": {
				"type": "string",
				"defaultValue": "abfss://testdata@o365ccodspdevnam2dp.dfs.core.windows.net/tl_0"
			},
			"WindowStartTime": {
				"type": "string",
				"defaultValue": "2023-10-01T00:00:00Z"
			},
			"WindowEndTime": {
				"type": "string",
				"defaultValue": "2023-10-02T00:00:00Z"
			},
			"TenantId": {
				"type": "string",
				"defaultValue": "82abb045-250e-4186-ba83-b9295930f272"
			},
			"OutputFormat": {
				"type": "string",
				"defaultValue": "PARQUET"
			},
			"IsDebugMode": {
				"type": "string",
				"defaultValue": "false"
			},
			"WriteToTestLocation": {
				"type": "string",
				"defaultValue": "false"
			},
			"EnableLogging": {
				"type": "string",
				"defaultValue": "true"
			},
			"DefaultFilePattern": {
				"type": "string"
			},
			"TenantSize": {
				"type": "string"
			},
			"FullDataSeedDate": {
				"type": "string"
			},
			"WatermarkFlags": {
				"type": "string",
				"defaultValue": "None"
			},
			"ValidateInFileCrossTenantValidation": {
				"type": "string",
				"defaultValue": "false"
			},
			"BuildVersion": {
				"type": "string"
			},
			"BucketCount": {
				"type": "string"
			},
			"SparkMaxPartitionBytesInRead": {
				"type": "string",
				"defaultValue": "268435456"
			},
			"SparkAdvisoryPartitionSizeInBytes": {
				"type": "string",
				"defaultValue": "268435456"
			},
			"SparkShufflePartitions": {
				"type": "string",
				"defaultValue": "4000"
			}
		},
		"variables": {
			"SynapseDriverNodeSize": {
				"type": "String"
			},
			"SynapseExecutorNodeSize": {
				"type": "String"
			},
			"SynapseExecutorNodeCount": {
				"type": "String"
			},
			"Timeout": {
				"type": "String",
				"defaultValue": "0.10:00:00"
			}
		},
		"folder": {
			"name": "Curation/Files"
		},
		"annotations": [
			"deployedFromCICD"
		],
		"type": "",
		"lastPublishTime": "2024-11-13T01:49:12Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}